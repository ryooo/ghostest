ja:
  functions:
    add_to_memory:
      description: 作業中の記憶として覚え、以降のプロンプトで常に送信します。
      parameters:
        contents_to_memory: 記憶したい内容を指定します。
      system_message_prefix: |-
        以下は、以前の工程で得たあなたの知見です。
        ```
        %{contents_to_memory}
        ```

    report_bug:
      description: テスト対象クラスを実装した人間のプログラマーに対して、不具合を報告します。
      parameters:
        message: |-
          プログラマーに伝えるべき内容を日本語で記述します。
          記述内容には具体的な場所と問題点および、あなたの考えを明記してください。

    exec_rspec_test:
      description: rspecのテストを実行します。
      parameters:
        file_or_dir_path: |-
          specファイルのファイルパスを指定します。
          ディレクトリパスが指定された場合は、ディレクトリ内のすべてのspecファイルを実行します。

    fix_one_rspec_test:
      description: |-
        指定されたテストがパスしない場合に原因を調査して修正します。
        このファンクションはエラーを1つずつ修正したい場合に利用します。
      parameters:
        file_path: specファイルのファイルパスを指定します。
        line_num: |-
          修正対象のテストが記述されている場所（specファイル内の対象テストの先頭の行番号）を指定します。
          このパラメーターには0以下の値は指定できません。
      system_prompt: |-
        あなたは優れたRubyのプログラマーです。
        あなたの職務は「%{source_path}」に対するrspecテストを「%{test_path}」に実装することです。

        ## 作業の手順
        以下の流れに沿ってテストコードを実装してください。
        1. テストコードを実装する前に、対象クラスの実装を確認します。
        実装を把握するために情報が不足している場合は以下の手順に従います。
          - リポジトリ内に関連するクラスがある場合は、そちらの実装を参考にします。
          - リポジトリ内に関連するクラスがない場合は、Gemfileからgem名を判断して、gemファイル内の実装を参考にします。
        2. 出力するrspecテストのファイルがすでにある場合は中身を確認し、現在どのようなテストが実装されているか確認します。
        3. テスト設計者のコメントや現時点の実装を考慮して、テストファイルに対して必要な作業を箇条書きにして、add_to_memoryファンクションに送信します。
        4. 実際にテストファイルを実装または修正します。
        5. rspecを実行し、結果を確認します。
        テストケースがエラーになる場合は、エラーの原因を調査して、正しく動作するようにテストケースを修正します。
        6. すべてのテストケースが通るようになったら、switch_assigneeファンクションを使ってレビュワーに対応内容の概要を説明します。
        何度か修正してもテストケースがパスせず原因がわからない場合は、switch_assigneeファンクションを使ってテスト設計者に相談します。
        
        ## 注意
        - テストをスキップする旨が記載されている場合はテストを実装しないでください。
        - 参考になる実装箇所や、作業の途中で得た設計方針など、記憶しておきたい有益な情報があった場合は、add_to_memoryファンクションを使って記憶してください。
        - テストに関連するすべてのダミーファイルは、spec/dummyフォルダの下に作成してください。
        - ファイル名・ディレクトリ名はスネークケースで作成してください。
        - ハッシュはハッシュロケット「{key => val}」の記法を使わず、「{key: val}」の記法で記述してください。
        - Rubyの文字列内で変数を展開したい場合は、文字列をダブルクォートで囲う必要があります。'#{source_locale}.yml'では展開されませんが"#{source_locale}.yml"なら展開されます。
        - 外部APIを呼び出すクラスなどを利用する場合は、モックを作成してください。
        - テスト時に作成したファイルやディレクトリは必ずテスト内で削除してください。
        - 外部APIを実行するコードについては、必ずモックを作ってください。
        - あまり詳細なテストケースは実装せず、様々なインプットでアウトプットや、どのような副作用が出るかをテストすること。
        - あなたは唯一のプログラマーなので、プログラムのポリシーはあなた自身で決定する責任があります。
        対応に問題がある場合は他の作業者に質問せず自分で問題を解決してください。
        - テスト対象のクラスは修正しないでください。
        テスト側で工夫してもパスできないような明らかな実装上の問題点がある場合はreport_bugファンクションを使って、テスト対象のクラスの開発者に日本語で報告してください。
        - 作業の最後には必ずswitch_assigneeファンクションかreport_bugファンクションのいずれかを使うこと。
        
        よろしくお願いします。

    get_files_list:
      description: リポジトリのファイルリストを取得します。

    get_gem_files_list:
      description: gemのファイルリストを取得します。
      parameters:
        gem_name: gemの名前を指定します。

    google_search:
      description: Googleから検索します。
      parameters:
        search_word: 検索文字列を指定します。

    make_new_file:
      description: 新しいテストファイルを作成します。
      parameters:
        filepath: テストファイルのパスを指定します。ディレクトリが存在しない場合は、ディレクトリを作成します。
        file_contents: テストファイルの内容を指定します。

    overwrite_file:
      description: テストファイルの内容を書き換えます。
      parameters:
        filepath: テストファイルのパスを指定します。
        new_text: 上書き後のテストファイル内の全テキストを指定します。

    open_url:
      description: HTMLの内容を取得します。
      parameters:
        url: HTMLを取得するURLを指定します。
        what_i_want_to_know: 具体的に知りたい内容について指定します。
      summary_system:
        ユーザーから送られるのはあるウェブページの内容です。
        この中からユーザーが知りたい内容と照らして有益な情報を抽出してください。
        ユーザーが知りたい内容は以下です。
        ```
        %{purpose}
        ```

    read_file:
      description: ファイルの内容を取得します。
      parameters:
        filepath: ファイルパスを指定します。

    record_lgtm:
      description: タスクをLGTMとして記録します。
      parameters:
        message: 確認した内容を指定します。

    switch_assignee:
      description: タスクの担当者を別のエージェントに変更します。
      parameters:
        next_assignee: enumに存在する中から、次の担当者の「名前(職種)」を指定します。
        message: 次の担当者に依頼するメッセージを指定します。

